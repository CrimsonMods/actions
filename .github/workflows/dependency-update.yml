name: Dependency Update

on:
  workflow_call:
    inputs:
      project-path:
        description: 'Path to the .csproj file'
        required: true
        type: string
      target-branch:
        description: 'Branch to create PRs against'
        required: false
        default: 'main'
        type: string
      dotnet-version:
        description: '.NET SDK version'
        required: false
        default: '6.0.x'
        type: string
      include-prerelease:
        description: 'Whether to include prerelease packages'
        required: false
        default: false
        type: boolean
      specific-packages:
        description: 'Specific packages to update (space-separated list). If empty, all packages will be checked.'
        required: false
        default: ''
        type: string
      excluded-packages:
        description: 'Pattern for packages to exclude from updates (regex pattern)'
        required: false
        default: '^BepInEx'
        type: string

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          
      - name: Create branch for updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          BRANCH_NAME="dependency-updates-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      
      - name: Restore dependencies
        run: dotnet restore ${{ inputs.project-path }}
      
      - name: Check for dependency updates and update
        id: update
        run: |
          UPDATES_FOUND=false
          
          if [ -z "${{ inputs.specific-packages }}" ]; then
            # Get list of all outdated packages
            echo "Checking for updates to all packages in ${{ inputs.project-path }}"
            if [ "${{ inputs.include-prerelease }}" == "true" ]; then
              OUTDATED_PACKAGES=$(dotnet list ${{ inputs.project-path }} package --outdated --include-prerelease)
            else
              OUTDATED_PACKAGES=$(dotnet list ${{ inputs.project-path }} package --outdated)
            fi
            
            # Check if any updates are available
            if echo "$OUTDATED_PACKAGES" | grep -q "> "; then
              UPDATES_FOUND=true
              
              # Get current packages
              CURRENT_PACKAGES=$(dotnet list ${{ inputs.project-path }} package | grep '>' | awk '{print $2}')
              
              # Update each package individually, skipping excluded ones
              for PACKAGE in $CURRENT_PACKAGES; do
                # Skip packages matching the exclusion pattern
                if [[ -n "${{ inputs.excluded-packages }}" && "$PACKAGE" =~ ${{ inputs.excluded-packages }} ]]; then
                  echo "Skipping excluded package: $PACKAGE"
                  continue
                fi
                
                # Check if this package has an update
                if echo "$OUTDATED_PACKAGES" | grep -q "> $PACKAGE"; then
                  echo "Updating package: $PACKAGE"
                  if [ "${{ inputs.include-prerelease }}" == "true" ]; then
                    dotnet add ${{ inputs.project-path }} package $PACKAGE --prerelease
                  else
                    dotnet add ${{ inputs.project-path }} package $PACKAGE
                  fi
                fi
              done
            fi
          else
            # Update specific packages
            for PACKAGE in ${{ inputs.specific-packages }}; do
              # Skip packages matching the exclusion pattern
              if [[ -n "${{ inputs.excluded-packages }}" && "$PACKAGE" =~ ${{ inputs.excluded-packages }} ]]; then
                echo "Skipping excluded package: $PACKAGE"
                continue
              fi
              
              echo "Checking for updates to $PACKAGE"
              if [ "${{ inputs.include-prerelease }}" == "true" ]; then
                UPDATES=$(dotnet list ${{ inputs.project-path }} package --outdated --include-prerelease | grep $PACKAGE)
              else
                UPDATES=$(dotnet list ${{ inputs.project-path }} package --outdated | grep $PACKAGE)
              fi
              
              if echo "$UPDATES" | grep -q "> "; then
                UPDATES_FOUND=true
                # Update this package
                if [ "${{ inputs.include-prerelease }}" == "true" ]; then
                  dotnet add ${{ inputs.project-path }} package $PACKAGE --prerelease
                else
                  dotnet add ${{ inputs.project-path }} package $PACKAGE
                fi
              fi
            done
          fi
          
          echo "UPDATES_FOUND=$UPDATES_FOUND" >> $GITHUB_ENV
      
      - name: Build project
        if: env.UPDATES_FOUND == 'true'
        run: dotnet build ${{ inputs.project-path }} -c Release
      
      - name: Find and upload DLL
        if: env.UPDATES_FOUND == 'true'
        run: |
          # Extract project directory and name from project path
          PROJECT_DIR=$(dirname "${{ inputs.project-path }}")
          PROJECT_NAME=$(basename "${{ inputs.project-path }}" .csproj)
          
          # Find the built DLL (trying common patterns)
          DLL_PATH=$(find "$PROJECT_DIR/bin/Release" -name "$PROJECT_NAME.dll" -type f | head -n 1)
          
          if [ -z "$DLL_PATH" ]; then
            echo "Could not find built DLL. Searching all bin directories..."
            DLL_PATH=$(find "$PROJECT_DIR/bin" -name "$PROJECT_NAME.dll" -type f | head -n 1)
          fi
          
          if [ -n "$DLL_PATH" ]; then
            echo "Found DLL at: $DLL_PATH"
            # Create artifacts directory
            mkdir -p artifacts
            cp "$DLL_PATH" artifacts/
            echo "DLL_NAME=$PROJECT_NAME.dll" >> $GITHUB_ENV
            echo "DLL_FOUND=true" >> $GITHUB_ENV
          else
            echo "Warning: Could not find built DLL"
            echo "DLL_FOUND=false" >> $GITHUB_ENV
          fi
      
      - name: Upload DLL as artifact
        if: env.UPDATES_FOUND == 'true' && env.DLL_FOUND == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DLL_NAME }}
          path: artifacts/${{ env.DLL_NAME }}
          retention-days: 14
      
      - name: Create Pull Request
        if: env.UPDATES_FOUND == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update NuGet dependencies [automated]"
          title: "Update NuGet dependencies"
          body: |
            This PR was automatically created by the dependency update workflow.
            
            It updates NuGet packages to their latest versions and verifies that the build succeeds.
            
            Please review the changes before merging.
            
            ${{ env.DLL_FOUND == 'true' && format('**Built DLL is available as a workflow artifact named `{0}`.**', env.DLL_NAME) || '**No built DLL was found.**' }}
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ inputs.target-branch }}
          add-paths: |
            ${{ inputs.project-path }}